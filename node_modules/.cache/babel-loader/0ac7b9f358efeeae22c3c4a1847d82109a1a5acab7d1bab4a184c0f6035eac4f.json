{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { useRoute, useRouter } from 'vue-router';\nimport { onMounted, ref } from 'vue';\nimport { firebaseApp } from '@/firebase';\nimport { Timestamp, addDoc, and, collection, doc, getDoc, getDocs, getFirestore, or, orderBy, query, where } from 'firebase/firestore';\nimport { useAuthStore } from '@/stores/auth';\nimport SentTextMessage from './messages/SentTextMessage.vue';\nimport ReceivedTextMessage from './messages/ReceivedTextMessage.vue';\nimport SentImageMessage from './messages/SentImageMessage.vue';\nimport ReceivedImageMessage from './messages/ReceivedImageMessage.vue';\nimport { getStorage, ref as storageRef, uploadBytes } from 'firebase/storage';\nimport SentAudioMessage from './messages/SentAudioMessage.vue';\nimport ReceivedAudioMessage from './messages/ReceivedAudioMessage.vue';\nexport default {\n  __name: 'MessagesPage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n    const auth = useAuthStore();\n    const router = useRouter();\n    let textContent = ref('');\n    let nickname = ref('');\n    let messages = ref([]);\n    let components = ref([]);\n    let isRecording = false;\n    let initial = true;\n    let recordedSeconds = ref(0);\n    onMounted(() => {\n      updateMessages();\n    });\n    function goBack() {\n      router.go(-1);\n    }\n    function photoUploaded(event) {\n      let file = event.target.files[0];\n      const uuid = crypto.randomUUID();\n      const storage = getStorage(firebaseApp);\n      const imagesRef = storageRef(storage, `images/${uuid}`);\n      uploadBytes(imagesRef, file).then(() => {\n        const db = getFirestore(firebaseApp);\n        const messagesColRef = collection(db, \"messages\");\n        const newMessage = {\n          from: auth.user.uid,\n          to: route.params.uid,\n          type: 'image',\n          timestamp: Timestamp.fromDate(new Date(Date.now())),\n          content: uuid\n        };\n        addDoc(messagesColRef, newMessage).then(() => {\n          updateMessages();\n        });\n      });\n      console.log(file);\n    }\n    function openAudio() {\n      if (navigator.mediaDevices.getUserMedia) {\n        isRecording = true;\n        const start = document.getElementById('startRecording');\n        const stop = document.getElementById('stopRecording');\n        const deleteRecording = document.getElementById('deleteRecording');\n        const sendMessage = document.getElementById('sendMessage');\n        const sendAudioMessage = document.getElementById('sendAudioMessage');\n        const constrains = {\n          audio: true\n        };\n        navigator.mediaDevices.getUserMedia(constrains).then(stream => {\n          let chunks = [];\n          const mediaRecorder = new MediaRecorder(stream);\n          mediaRecorder.ondataavailable = e => {\n            chunks.push(e.data);\n          };\n          recordedSeconds.value = 0;\n          textContent.value.value = new Date(recordedSeconds.value * 1000).toISOString().slice(14, 19);\n          mediaRecorder.start();\n          var countTimeInterval = setInterval(() => {\n            recordedSeconds.value++;\n            console.log(textContent.value);\n            textContent.value.value = new Date(recordedSeconds.value * 1000).toISOString().slice(14, 19);\n          }, 1000);\n          sendMessage.style.display = 'none';\n          sendAudioMessage.style.display = 'block';\n          start.style.display = 'none';\n          stop.style.display = 'block';\n          stop.onclick = () => {\n            mediaRecorder.stop();\n            clearInterval(countTimeInterval);\n            console.log('stop clicked');\n            stop.style.display = 'none';\n            deleteRecording.style.display = 'block';\n            deleteRecording.onclick = () => {\n              chunks = [];\n              recordedSeconds.value = 0;\n              textContent.value.value = \"\";\n              sendMessage.style.display = 'block';\n              sendAudioMessage.style.display = 'none';\n              start.style.display = 'block';\n              deleteRecording.style.display = 'none';\n              stop.style.display = 'none';\n              stream.getTracks().forEach(track => track.stop());\n              isRecording = false;\n            };\n          };\n          mediaRecorder.onstop = () => {\n            console.log('onstop event');\n            sendAudioMessage.onclick = () => {\n              console.log('send audio click');\n              const blob = new Blob(chunks, {\n                type: \"audio/ogg; codecs=opus\"\n              });\n              const uuid = crypto.randomUUID();\n              const storage = getStorage(firebaseApp);\n              const imagesRef = storageRef(storage, `audio/${uuid}`);\n              uploadBytes(imagesRef, blob).then(() => {\n                const db = getFirestore(firebaseApp);\n                const messagesColRef = collection(db, \"messages\");\n                const newMessage = {\n                  from: auth.user.uid,\n                  to: route.params.uid,\n                  type: 'audio',\n                  timestamp: Timestamp.fromDate(new Date(Date.now())),\n                  content: uuid\n                };\n                addDoc(messagesColRef, newMessage).then(() => {\n                  updateMessages();\n                  recordedSeconds.value = 0;\n                  textContent.value.value = \"\";\n                  sendMessage.style.display = 'block';\n                  sendAudioMessage.style.display = 'none';\n                  start.style.display = 'block';\n                  stop.style.display = 'none';\n                  deleteRecording.style.display = 'none';\n                  stream.getTracks().forEach(track => track.stop());\n                  isRecording = false;\n                });\n              });\n            };\n          };\n        });\n      }\n    }\n    function updateMessages() {\n      const db = getFirestore(firebaseApp);\n      const messagesColRef = collection(db, \"messages\");\n      const userDocRef = doc(db, \"users\", route.params.uid);\n      messages.value = [];\n      getDoc(userDocRef).then(snapshot => {\n        if (snapshot.exists()) {\n          nickname.value = snapshot.data().nickname;\n          console.log(nickname.value);\n        }\n      });\n      const q = query(messagesColRef, or(and(where('from', '==', auth.user.uid), where('to', '==', route.params.uid)), and(where('to', '==', auth.user.uid), where('from', '==', route.params.uid))), orderBy('timestamp', 'desc'));\n      getDocs(q).then(snapshot => {\n        snapshot.forEach(doc => {\n          let data = doc.data();\n          messages.value.push({\n            'id': doc.id,\n            ...data\n          });\n        });\n        console.log(messages.value);\n        messages.value.forEach(message => {\n          const id = message.id;\n          const type = message.type;\n          const sent = message.from === auth.user.uid;\n          const content = message.content;\n          if (!components.value.map(c => c.id).includes(id)) {\n            if (initial) {\n              switch (type) {\n                case 'text':\n                  if (sent) {\n                    components.value.push({\n                      'id': id,\n                      'name': SentTextMessage,\n                      'content': content\n                    });\n                  } else {\n                    components.value.push({\n                      'id': id,\n                      'name': ReceivedTextMessage,\n                      'content': content\n                    });\n                  }\n                  break;\n                case 'image':\n                  if (sent) {\n                    components.value.push({\n                      'id': id,\n                      'name': SentImageMessage,\n                      'content': content\n                    });\n                  } else {\n                    components.value.push({\n                      'id': id,\n                      'name': ReceivedImageMessage,\n                      'content': content\n                    });\n                  }\n                  break;\n                case 'audio':\n                  if (sent) {\n                    components.value.push({\n                      'id': id,\n                      'name': SentAudioMessage,\n                      'content': content\n                    });\n                  } else {\n                    components.value.push({\n                      'id': id,\n                      'name': ReceivedAudioMessage,\n                      'content': content\n                    });\n                  }\n                  break;\n              }\n            } else {\n              switch (type) {\n                case 'text':\n                  if (sent) {\n                    components.value.unshift({\n                      'id': id,\n                      'name': SentTextMessage,\n                      'content': content\n                    });\n                  } else {\n                    components.value.unshift({\n                      'id': id,\n                      'name': ReceivedTextMessage,\n                      'content': content\n                    });\n                  }\n                  break;\n                case 'image':\n                  if (sent) {\n                    components.value.unshift({\n                      'id': id,\n                      'name': SentImageMessage,\n                      'content': content\n                    });\n                  } else {\n                    components.value.unshift({\n                      'id': id,\n                      'name': ReceivedImageMessage,\n                      'content': content\n                    });\n                  }\n                  break;\n                case 'audio':\n                  if (sent) {\n                    components.value.unshift({\n                      'id': id,\n                      'name': SentAudioMessage,\n                      'content': content\n                    });\n                  } else {\n                    components.value.unshift({\n                      'id': id,\n                      'name': ReceivedAudioMessage,\n                      'content': content\n                    });\n                  }\n                  break;\n              }\n            }\n          }\n        });\n        if (initial) initial = !initial;\n      });\n    }\n    function sendMessage() {\n      if (!isRecording) {\n        const db = getFirestore(firebaseApp);\n        const messagesColRef = collection(db, \"messages\");\n        const newMessage = {\n          from: auth.user.uid,\n          to: route.params.uid,\n          type: 'text',\n          timestamp: Timestamp.fromDate(new Date(Date.now())),\n          content: textContent.value.value\n        };\n        addDoc(messagesColRef, newMessage).then(() => {\n          updateMessages();\n          textContent.value.value = '';\n        });\n      }\n    }\n    const __returned__ = {\n      route,\n      auth,\n      router,\n      get textContent() {\n        return textContent;\n      },\n      set textContent(v) {\n        textContent = v;\n      },\n      get nickname() {\n        return nickname;\n      },\n      set nickname(v) {\n        nickname = v;\n      },\n      get messages() {\n        return messages;\n      },\n      set messages(v) {\n        messages = v;\n      },\n      get components() {\n        return components;\n      },\n      set components(v) {\n        components = v;\n      },\n      get isRecording() {\n        return isRecording;\n      },\n      set isRecording(v) {\n        isRecording = v;\n      },\n      get initial() {\n        return initial;\n      },\n      set initial(v) {\n        initial = v;\n      },\n      get recordedSeconds() {\n        return recordedSeconds;\n      },\n      set recordedSeconds(v) {\n        recordedSeconds = v;\n      },\n      goBack,\n      photoUploaded,\n      openAudio,\n      updateMessages,\n      sendMessage,\n      get useRoute() {\n        return useRoute;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      onMounted,\n      ref,\n      get firebaseApp() {\n        return firebaseApp;\n      },\n      get Timestamp() {\n        return Timestamp;\n      },\n      get addDoc() {\n        return addDoc;\n      },\n      get and() {\n        return and;\n      },\n      get collection() {\n        return collection;\n      },\n      get doc() {\n        return doc;\n      },\n      get getDoc() {\n        return getDoc;\n      },\n      get getDocs() {\n        return getDocs;\n      },\n      get getFirestore() {\n        return getFirestore;\n      },\n      get or() {\n        return or;\n      },\n      get orderBy() {\n        return orderBy;\n      },\n      get query() {\n        return query;\n      },\n      get where() {\n        return where;\n      },\n      get useAuthStore() {\n        return useAuthStore;\n      },\n      SentTextMessage,\n      ReceivedTextMessage,\n      SentImageMessage,\n      ReceivedImageMessage,\n      get getStorage() {\n        return getStorage;\n      },\n      get storageRef() {\n        return storageRef;\n      },\n      get uploadBytes() {\n        return uploadBytes;\n      },\n      SentAudioMessage,\n      ReceivedAudioMessage\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["useRoute","useRouter","onMounted","ref","firebaseApp","Timestamp","addDoc","and","collection","doc","getDoc","getDocs","getFirestore","or","orderBy","query","where","useAuthStore","SentTextMessage","ReceivedTextMessage","SentImageMessage","ReceivedImageMessage","getStorage","storageRef","uploadBytes","SentAudioMessage","ReceivedAudioMessage","route","auth","router","textContent","nickname","messages","components","isRecording","initial","recordedSeconds","updateMessages","goBack","go","photoUploaded","event","file","target","files","uuid","crypto","randomUUID","storage","imagesRef","then","db","messagesColRef","newMessage","from","user","uid","to","params","type","timestamp","fromDate","Date","now","content","console","log","openAudio","navigator","mediaDevices","getUserMedia","start","document","getElementById","stop","deleteRecording","sendMessage","sendAudioMessage","constrains","audio","stream","chunks","mediaRecorder","MediaRecorder","ondataavailable","e","push","data","value","toISOString","slice","countTimeInterval","setInterval","style","display","onclick","clearInterval","getTracks","forEach","track","onstop","blob","Blob","userDocRef","snapshot","exists","q","id","message","sent","map","c","includes","unshift"],"sources":["D:/UserData/Desktop/UEK/PSM/KKDP/psm-project/src/components/MessagesPage.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n        <header class=\"navbar\">\r\n            <img @click=\"goBack\" src=\"back.png\" width=\"30px\"/>\r\n            <span class=\"headerText\">{{ nickname }}</span>\r\n            <div style=\"width: 30px\"></div>\r\n        </header>\r\n        <div class=\"messagesContent\">\r\n            <component v-for=\"component in components\" :is=\"component.name\" :key=\"component.id\" :content=\"component.content\"></component>\r\n        </div>\r\n        <footer>\r\n            <label for=\"photoUpload\">\r\n                <input id=\"photoUpload\" type=\"file\" accept=\"image/png,image/jpeg\" @change=\"photoUploaded\">\r\n                <img src=\"images.png\" width=\"30px\"/>\r\n            </label>\r\n            <img id=\"startRecording\" @click=\"openAudio\" src=\"mic.png\" width=\"30px\"/>\r\n            <img id=\"stopRecording\" src=\"stop.png\" width=\"30px\"/>\r\n            <img id=\"deleteRecording\" src=\"trashcan.png\" width=\"30px\"/>\r\n            <input class=\"form-control\" ref=\"textContent\" type=\"text\" />\r\n            <img id=\"sendMessage\" @click=\"sendMessage\" src=\"send.png\" width=\"30px\"/>\r\n            <img id=\"sendAudioMessage\" src=\"send.png\" width=\"30px\"/>\r\n        </footer>\r\n    </div>\r\n</template>\r\n\r\n<style>\r\n\r\n    #stopRecording {\r\n        display: none;\r\n    }\r\n\r\n    #sendAudioMessage {\r\n        display: none;\r\n    }\r\n\r\n    #recordingStatus {\r\n        display:block;\r\n    }\r\n\r\n    #deleteRecording {\r\n        display: none;\r\n    }\r\n\r\n    #photoUpload {\r\n        display: none;\r\n    }\r\n\r\n\r\n    .container .messagesContent {\r\n        flex: 1 1 auto;\r\n        display: flex;\r\n        flex-direction: column-reverse;\r\n        overflow-y: auto;\r\n        min-height: 0px;\r\n    }\r\n\r\n    footer {\r\n        padding: 5px;\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n\r\n    footer textarea {\r\n        flex: 1 1 auto;\r\n        height: 50px;\r\n    }\r\n\r\n    footer img {\r\n        margin: 5px;\r\n    }\r\n\r\n\r\n</style>\r\n\r\n<script setup>\r\n    import { useRoute, useRouter } from 'vue-router';\r\n    import { onMounted, ref } from 'vue';\r\n    import { firebaseApp } from '@/firebase';\r\n    import { Timestamp, addDoc, and, collection, doc, getDoc, getDocs, getFirestore, or, orderBy, query, where } from 'firebase/firestore';\r\n    import { useAuthStore } from '@/stores/auth';\r\n    import SentTextMessage from './messages/SentTextMessage.vue';\r\n    import ReceivedTextMessage from './messages/ReceivedTextMessage.vue';\r\n    import SentImageMessage from './messages/SentImageMessage.vue';\r\n    import ReceivedImageMessage from './messages/ReceivedImageMessage.vue';\r\nimport { getStorage, ref as storageRef, uploadBytes } from 'firebase/storage';\r\nimport SentAudioMessage from './messages/SentAudioMessage.vue';\r\nimport ReceivedAudioMessage from './messages/ReceivedAudioMessage.vue';\r\n    const route = useRoute();\r\n    const auth = useAuthStore();\r\n    const router = useRouter();\r\n\r\n    let textContent = ref('');\r\n    let nickname = ref('');\r\n    let messages = ref([]);\r\n    let components = ref([]);\r\n    let isRecording = false;\r\n    let initial = true;\r\n    let recordedSeconds = ref(0);\r\n    onMounted(() => {\r\n        updateMessages();\r\n    });\r\n\r\n    function goBack() {\r\n        router.go(-1);\r\n    }\r\n\r\n\r\n    function photoUploaded(event) {\r\n        let file = event.target.files[0];\r\n        const uuid = crypto.randomUUID();\r\n        const storage = getStorage(firebaseApp);\r\n        const imagesRef = storageRef(storage, `images/${uuid}`);\r\n        uploadBytes(imagesRef, file)\r\n        .then(() => {\r\n            const db = getFirestore(firebaseApp);\r\n            const messagesColRef = collection(db, \"messages\");\r\n            const newMessage = {\r\n                from: auth.user.uid,\r\n                to: route.params.uid,\r\n                type: 'image',\r\n                timestamp: Timestamp.fromDate(new Date(Date.now())),\r\n                content: uuid\r\n            };\r\n            addDoc(messagesColRef, newMessage)\r\n            .then(() => {\r\n                updateMessages();\r\n            })\r\n        })\r\n\r\n        console.log(file);\r\n    }\r\n\r\n    function openAudio() {\r\n        if(navigator.mediaDevices.getUserMedia) {\r\n            isRecording = true;\r\n            const start = document.getElementById('startRecording');\r\n            const stop = document.getElementById('stopRecording');\r\n            const deleteRecording = document.getElementById('deleteRecording');\r\n            const sendMessage = document.getElementById('sendMessage');\r\n            const sendAudioMessage = document.getElementById('sendAudioMessage');\r\n\r\n            const constrains = { audio: true };\r\n            navigator.mediaDevices.getUserMedia(constrains)\r\n            .then((stream) => {\r\n                let chunks = [];\r\n                const mediaRecorder = new MediaRecorder(stream);\r\n\r\n                mediaRecorder.ondataavailable = (e) => {\r\n                    chunks.push(e.data);\r\n                }\r\n                recordedSeconds.value = 0\r\n                textContent.value.value = new Date(recordedSeconds.value * 1000).toISOString().slice(14, 19);\r\n                mediaRecorder.start();\r\n                var countTimeInterval = setInterval(() => {\r\n                    recordedSeconds.value++;\r\n                    console.log(textContent.value);\r\n                    textContent.value.value = new Date(recordedSeconds.value * 1000).toISOString().slice(14, 19);\r\n                }, 1000);\r\n                sendMessage.style.display = 'none';\r\n                sendAudioMessage.style.display = 'block';\r\n                start.style.display = 'none';\r\n                stop.style.display = 'block';\r\n\r\n                stop.onclick = () => {\r\n                    mediaRecorder.stop();\r\n                    clearInterval(countTimeInterval);\r\n                    console.log('stop clicked');\r\n                    stop.style.display = 'none';\r\n                    deleteRecording.style.display = 'block';\r\n                    deleteRecording.onclick = () => {\r\n                        chunks = [];\r\n                        recordedSeconds.value = 0;\r\n                        textContent.value.value = \"\";\r\n                        sendMessage.style.display = 'block';\r\n                        sendAudioMessage.style.display = 'none';\r\n                        start.style.display = 'block';\r\n                        deleteRecording.style.display = 'none';\r\n                        stop.style.display = 'none';\r\n                        stream.getTracks().forEach(track => track.stop());\r\n                        isRecording = false;\r\n                    }\r\n                }\r\n\r\n                mediaRecorder.onstop = () => {\r\n                    console.log('onstop event');\r\n                    sendAudioMessage.onclick = () => {\r\n                        console.log('send audio click')\r\n                    const blob = new Blob(chunks, { type: \"audio/ogg; codecs=opus\" });\r\n                    const uuid = crypto.randomUUID();\r\n                    const storage = getStorage(firebaseApp);\r\n                    const imagesRef = storageRef(storage, `audio/${uuid}`);\r\n                    uploadBytes(imagesRef, blob)\r\n                    .then(() => {\r\n                        const db = getFirestore(firebaseApp);\r\n                        const messagesColRef = collection(db, \"messages\");\r\n                        const newMessage = {\r\n                            from: auth.user.uid,\r\n                            to: route.params.uid,\r\n                            type: 'audio',\r\n                            timestamp: Timestamp.fromDate(new Date(Date.now())),\r\n                            content: uuid\r\n                        };\r\n                        addDoc(messagesColRef, newMessage)\r\n                        .then(() => {\r\n                            updateMessages();\r\n                            recordedSeconds.value = 0;\r\n                            textContent.value.value = \"\";\r\n                            sendMessage.style.display = 'block';\r\n                            sendAudioMessage.style.display = 'none';\r\n                            start.style.display = 'block';\r\n                            stop.style.display = 'none';\r\n                            deleteRecording.style.display = 'none';\r\n                            stream.getTracks().forEach(track => track.stop());\r\n                            isRecording = false;\r\n                        })\r\n                    })\r\n\r\n                }\r\n                }\r\n\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    function updateMessages() {\r\n        const db = getFirestore(firebaseApp)\r\n        const messagesColRef = collection(db, \"messages\");\r\n        const userDocRef = doc(db, \"users\", route.params.uid);\r\n        messages.value = [];\r\n        getDoc(userDocRef)\r\n        .then((snapshot) => {\r\n            if(snapshot.exists()) {\r\n                nickname.value = snapshot.data().nickname;\r\n                console.log(nickname.value);\r\n            }\r\n        })\r\n\r\n        const q = query(messagesColRef, or(and(where('from', '==', auth.user.uid), where('to', '==', route.params.uid)), and(where('to', '==', auth.user.uid), where('from', '==', route.params.uid))), orderBy('timestamp', 'desc'));\r\n        getDocs(q)\r\n        .then((snapshot) => {\r\n            snapshot.forEach((doc) => {\r\n                let data = doc.data();\r\n                messages.value.push({'id': doc.id, ...data});\r\n            });\r\n            console.log(messages.value);\r\n            messages.value.forEach((message) => {\r\n                const id = message.id;\r\n                const type = message.type;\r\n                const sent = message.from === auth.user.uid;\r\n                const content = message.content;\r\n                if(!components.value.map((c) => c.id).includes(id)) {\r\n                    if(initial) {\r\n                        switch(type) {\r\n                    case 'text':\r\n                        if(sent) {\r\n                            components.value.push({\r\n                                'id': id,\r\n                                'name': SentTextMessage,\r\n                                'content': content\r\n                            });\r\n                        } else {\r\n                            components.value.push({\r\n                                'id': id,\r\n                                'name': ReceivedTextMessage,\r\n                                'content': content\r\n                            });\r\n                        }\r\n                        break;\r\n                    case 'image':\r\n                    if(sent) {\r\n                            components.value.push({\r\n                                'id': id,\r\n                                'name': SentImageMessage,\r\n                                'content': content\r\n                            });\r\n                        } else {\r\n                            components.value.push({\r\n                                'id': id,\r\n                                'name': ReceivedImageMessage,\r\n                                'content': content\r\n                            });\r\n                        }\r\n                        break;\r\n                    case 'audio':\r\n                    if(sent) {\r\n                            components.value.push({\r\n                                'id': id,\r\n                                'name': SentAudioMessage,\r\n                                'content': content\r\n                            });\r\n                        } else {\r\n                            components.value.push({\r\n                                'id': id,\r\n                                'name': ReceivedAudioMessage,\r\n                                'content': content\r\n                            });\r\n                        }\r\n                        break;\r\n                }\r\n                    } else {\r\n                        switch(type) {\r\n                    case 'text':\r\n                        if(sent) {\r\n                            components.value.unshift({\r\n                                'id': id,\r\n                                'name': SentTextMessage,\r\n                                'content': content\r\n                            });\r\n                        } else {\r\n                            components.value.unshift({\r\n                                'id': id,\r\n                                'name': ReceivedTextMessage,\r\n                                'content': content\r\n                            });\r\n                        }\r\n                        break;\r\n                    case 'image':\r\n                    if(sent) {\r\n                            components.value.unshift({\r\n                                'id': id,\r\n                                'name': SentImageMessage,\r\n                                'content': content\r\n                            });\r\n                        } else {\r\n                            components.value.unshift({\r\n                                'id': id,\r\n                                'name': ReceivedImageMessage,\r\n                                'content': content\r\n                            });\r\n                        }\r\n                        break;\r\n                case 'audio':\r\n                    if(sent) {\r\n                            components.value.unshift({\r\n                                'id': id,\r\n                                'name': SentAudioMessage,\r\n                                'content': content\r\n                            });\r\n                        } else {\r\n                            components.value.unshift({\r\n                                'id': id,\r\n                                'name': ReceivedAudioMessage,\r\n                                'content': content\r\n                            });\r\n                        }\r\n                        break;\r\n                }\r\n                    }\r\n\r\n                }\r\n                \r\n            });\r\n\r\n            if(initial) initial = !initial;\r\n        })\r\n    }\r\n\r\n    function sendMessage() {\r\n        if(!isRecording) {\r\n            const db = getFirestore(firebaseApp);\r\n            const messagesColRef = collection(db, \"messages\");\r\n            const newMessage = {\r\n                from: auth.user.uid,\r\n                to: route.params.uid,\r\n                type: 'text',\r\n                timestamp: Timestamp.fromDate(new Date(Date.now())),\r\n                content: textContent.value.value\r\n            };\r\n            addDoc(messagesColRef, newMessage)\r\n            .then(() => {\r\n                updateMessages();\r\n                textContent.value.value = '';\r\n            })\r\n        }\r\n    }\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}