{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"content\"\n}, [/*#__PURE__*/_createCommentVNode(\" <component v-for=\\\"component in components.value\\\" :is=\\\"component.name\\\" :content=\\\"component.content\\\"></component> \"), /*#__PURE__*/_createCommentVNode(\" <SentTextMessage content=\\\"Test Sent Message\\\"></SentTextMessage>\\r\\n            <ReceivedTextMessage content=\\\"Test Received Message\\\"></ReceivedTextMessage> \")], -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"footer\", null, \"textbox\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"header\", null, _toDisplayString($setup.nickname.value), 1 /* TEXT */), _hoisted_2, _hoisted_3]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createCommentVNode","_createElementBlock","_hoisted_1","_toDisplayString","$setup","nickname","value","_hoisted_2","_hoisted_3"],"sources":["D:\\UserData\\Desktop\\UEK\\PSM\\KKDP\\psm-project\\src\\components\\MessagesPage.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n        <header>{{ nickname.value }}</header>\r\n        <div class=\"content\">\r\n            <!-- <component v-for=\"component in components.value\" :is=\"component.name\" :content=\"component.content\"></component> -->\r\n            <!-- <SentTextMessage content=\"Test Sent Message\"></SentTextMessage>\r\n            <ReceivedTextMessage content=\"Test Received Message\"></ReceivedTextMessage> -->\r\n        </div>\r\n        <footer>textbox</footer>\r\n    </div>\r\n</template>\r\n\r\n<style>\r\n    .container {\r\n        display: flex;\r\n        flex-direction: column;\r\n        height: 100%;\r\n        width: 100%;\r\n    }\r\n\r\n    .container header, footer {\r\n        padding: 10px;\r\n    }\r\n    .container .content {\r\n        flex: 1 1 auto;\r\n        display: flex;\r\n        flex-direction: column-reverse;\r\n        overflow-y: auto;\r\n        min-height: 0px;\r\n    }\r\n\r\n\r\n\r\n</style>\r\n\r\n<script setup>\r\n    import { useRoute } from 'vue-router';\r\n    import { onMounted, ref } from 'vue';\r\n    import { firebaseApp } from '@/firebase';\r\n    import { and, collection, doc, getDoc, getDocs, getFirestore, or, orderBy, query, where } from 'firebase/firestore';\r\n    import { useAuthStore } from '@/stores/auth';\r\n    // import SentTextMessage from './messages/SentTextMessage.vue';\r\n    // import ReceivedTextMessage from './messages/ReceivedTextMessage.vue';\r\n    const route = useRoute();\r\n    const auth = useAuthStore();\r\n\r\n    let nickname = ref('');\r\n    let messages = ref([]);\r\n    let components = ref([]);\r\n    onMounted(() => {\r\n        const db = getFirestore(firebaseApp)\r\n        const messagesColRef = collection(db, \"messages\");\r\n        const userDocRef = doc(db, \"users\", route.params.uid);\r\n\r\n        getDoc(userDocRef)\r\n        .then((snapshot) => {\r\n            if(snapshot.exists()) {\r\n                nickname.value = snapshot.data().nickname;\r\n            }\r\n        })\r\n\r\n        const q = query(messagesColRef, or(and(where('from', '==', auth.user.uid), where('to', '==', route.params.uid)), (where('to', '==', auth.user.uid), where('from', '==', route.params.uid))), orderBy('timestamp'));\r\n        getDocs(q)\r\n        .then((snapshot) => {\r\n            snapshot.forEach((doc) => {\r\n                let data = doc.data();\r\n                messages.value.push({'id': doc.id, ...data});\r\n            });\r\n            console.log(messages.value);\r\n            messages.value.forEach((message) => {\r\n                const type = message.type;\r\n                const sent = message.from === auth.user.uid;\r\n                const content = message.content;\r\n\r\n                switch(type) {\r\n                    case 'text':\r\n                        if(sent) {\r\n                            components.value.push({\r\n                                'name': 'SentTextMessage',\r\n                                'content': content\r\n                            });\r\n                        } else {\r\n                            components.value.push({\r\n                                'name': 'ReceivedTextMessage',\r\n                                'content': content\r\n                            });\r\n                        }\r\n                }\r\n            });\r\n        })\r\n\r\n        \r\n    });\r\n\r\n</script>"],"mappings":";;EACSA,KAAK,EAAC;AAAW;gCAElBC,mBAAA,CAIM;EAJDD,KAAK,EAAC;AAAS,I,aAChBE,mBAAA,2HAAwH,E,aACxHA,mBAAA,oKAC+E,C;gCAEnFD,mBAAA,CAAwB,gBAAhB,SAAO;;uBAPnBE,mBAAA,CAQM,OARNC,UAQM,GAPFH,mBAAA,CAAqC,gBAAAI,gBAAA,CAA1BC,MAAA,CAAAC,QAAQ,CAACC,KAAK,kBACzBC,UAIM,EACNC,UAAwB,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}