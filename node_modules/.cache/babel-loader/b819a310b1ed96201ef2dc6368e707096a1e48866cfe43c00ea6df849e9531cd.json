{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveDynamicComponent as _resolveDynamicComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"content\"\n};\nconst _hoisted_3 = {\n  for: \"photoUpload\"\n};\nconst _hoisted_4 = {\n  ref: \"textContent\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"header\", null, _toDisplayString($setup.nickname), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.components, component => {\n    return _openBlock(), _createBlock(_resolveDynamicComponent(component.name), {\n      key: component.id,\n      content: component.content\n    }, null, 8 /* PROPS */, [\"content\"]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"footer\", null, [_createElementVNode(\"img\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.openCamera && _ctx.openCamera(...args)),\n    src: \"camera.png\",\n    width: \"30px\"\n  }), _createElementVNode(\"label\", _hoisted_3, [_createElementVNode(\"input\", {\n    id: \"photoUpload\",\n    type: \"file\",\n    accept: \"image/png,image/jpeg\",\n    onChange: $setup.photoUploaded\n  }, null, 32 /* NEED_HYDRATION */), _createElementVNode(\"img\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => _ctx.openImages && _ctx.openImages(...args)),\n    src: \"images.png\",\n    width: \"30px\"\n  })]), _createElementVNode(\"img\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => _ctx.openAudio && _ctx.openAudio(...args)),\n    src: \"mic.png\",\n    width: \"30px\"\n  }), _createElementVNode(\"textarea\", _hoisted_4, null, 512 /* NEED_PATCH */), _createElementVNode(\"img\", {\n    onClick: $setup.sendMessage,\n    src: \"send.png\",\n    width: \"30px\"\n  })])]);\n}","map":{"version":3,"names":["class","for","ref","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","$setup","nickname","_hoisted_2","_Fragment","_renderList","components","component","_createBlock","_resolveDynamicComponent","name","key","id","content","onClick","_cache","args","_ctx","openCamera","src","width","_hoisted_3","type","accept","onChange","photoUploaded","openImages","openAudio","_hoisted_4","sendMessage"],"sources":["D:\\UserData\\Desktop\\UEK\\PSM\\KKDP\\psm-project\\src\\components\\MessagesPage.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n        <header>{{ nickname }}</header>\r\n        <div class=\"content\">\r\n            <component v-for=\"component in components\" :is=\"component.name\" :key=\"component.id\" :content=\"component.content\"></component>\r\n        </div>\r\n        <footer>\r\n            <img @click=\"openCamera\" src=\"camera.png\" width=\"30px\"/>\r\n            <label for=\"photoUpload\">\r\n                <input id=\"photoUpload\" type=\"file\" accept=\"image/png,image/jpeg\" @change=\"photoUploaded\">\r\n                <img @click=\"openImages\" src=\"images.png\" width=\"30px\"/>\r\n            </label>\r\n            <img @click=\"openAudio\" src=\"mic.png\" width=\"30px\"/>\r\n            <textarea ref=\"textContent\"></textarea>\r\n            <img @click=\"sendMessage\" src=\"send.png\" width=\"30px\"/>\r\n        </footer>\r\n    </div>\r\n</template>\r\n\r\n<style>\r\n    .container {\r\n        display: flex;\r\n        flex-direction: column;\r\n        height: 100%;\r\n        width: 100%;\r\n        background-color: #eee;\r\n    }\r\n\r\n    #photoUpload {\r\n        display: none;\r\n    }\r\n\r\n    .container header, footer {\r\n        padding: 10px;\r\n    }\r\n    .container .content {\r\n        flex: 1 1 auto;\r\n        display: flex;\r\n        flex-direction: column-reverse;\r\n        overflow-y: auto;\r\n        min-height: 0px;\r\n    }\r\n\r\n    footer {\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n\r\n    footer textarea {\r\n        flex: 1 1 auto;\r\n        height: 50px;\r\n    }\r\n\r\n    footer img {\r\n        margin: 5px;\r\n    }\r\n\r\n\r\n</style>\r\n\r\n<script setup>\r\n    import { useRoute } from 'vue-router';\r\n    import { onMounted, ref } from 'vue';\r\n    import { firebaseApp } from '@/firebase';\r\n    import { Timestamp, addDoc, and, collection, doc, getDoc, getDocs, getFirestore, or, orderBy, query, where } from 'firebase/firestore';\r\n    import { useAuthStore } from '@/stores/auth';\r\n    import SentTextMessage from './messages/SentTextMessage.vue';\r\n    import ReceivedTextMessage from './messages/ReceivedTextMessage.vue';\r\n    import SentImageMessage from './messages/SentImageMessage.vue';\r\n    import ReceivedImageMessage from './messages/ReceivedImageMessage.vue';\r\n    const route = useRoute();\r\n    const auth = useAuthStore();\r\n\r\n    let textContent = ref('');\r\n    let nickname = ref('');\r\n    let messages = ref([]);\r\n    let components = ref([]);\r\n    let initial = true;\r\n    onMounted(() => {\r\n        updateMessages();\r\n    });\r\n\r\n    function photoUploaded(event) {\r\n        console.log(event);\r\n    }\r\n\r\n    function updateMessages() {\r\n        const db = getFirestore(firebaseApp)\r\n        const messagesColRef = collection(db, \"messages\");\r\n        const userDocRef = doc(db, \"users\", route.params.uid);\r\n        messages.value = [];\r\n        getDoc(userDocRef)\r\n        .then((snapshot) => {\r\n            if(snapshot.exists()) {\r\n                nickname.value = snapshot.data().nickname;\r\n                console.log(nickname.value);\r\n            }\r\n        })\r\n\r\n        const q = query(messagesColRef, or(and(where('from', '==', auth.user.uid), where('to', '==', route.params.uid)), (where('to', '==', auth.user.uid), where('from', '==', route.params.uid))), orderBy('timestamp', 'desc'));\r\n        getDocs(q)\r\n        .then((snapshot) => {\r\n            snapshot.forEach((doc) => {\r\n                let data = doc.data();\r\n                messages.value.push({'id': doc.id, ...data});\r\n            });\r\n            console.log(messages.value);\r\n            messages.value.forEach((message) => {\r\n                const id = message.id;\r\n                const type = message.type;\r\n                const sent = message.from === auth.user.uid;\r\n                const content = message.content;\r\n                if(!components.value.map((c) => c.id).includes(id)) {\r\n                    if(initial) {\r\n                        switch(type) {\r\n                    case 'text':\r\n                        if(sent) {\r\n                            components.value.push({\r\n                                'id': id,\r\n                                'name': SentTextMessage,\r\n                                'content': content\r\n                            });\r\n                        } else {\r\n                            components.value.push({\r\n                                'id': id,\r\n                                'name': ReceivedTextMessage,\r\n                                'content': content\r\n                            });\r\n                        }\r\n                        break;\r\n                    case 'image':\r\n                    if(sent) {\r\n                            components.value.push({\r\n                                'id': id,\r\n                                'name': SentImageMessage,\r\n                                'content': content\r\n                            });\r\n                        } else {\r\n                            components.value.push({\r\n                                'id': id,\r\n                                'name': ReceivedImageMessage,\r\n                                'content': content\r\n                            });\r\n                        }\r\n                        break;\r\n                }\r\n                    } else {\r\n                        switch(type) {\r\n                    case 'text':\r\n                        if(sent) {\r\n                            components.value.unshift({\r\n                                'id': id,\r\n                                'name': SentTextMessage,\r\n                                'content': content\r\n                            });\r\n                        } else {\r\n                            components.value.unshift({\r\n                                'id': id,\r\n                                'name': ReceivedTextMessage,\r\n                                'content': content\r\n                            });\r\n                        }\r\n                        break;\r\n                    case 'image':\r\n                    if(sent) {\r\n                            components.value.unshift({\r\n                                'id': id,\r\n                                'name': SentImageMessage,\r\n                                'content': content\r\n                            });\r\n                        } else {\r\n                            components.value.unshift({\r\n                                'id': id,\r\n                                'name': ReceivedImageMessage,\r\n                                'content': content\r\n                            });\r\n                        }\r\n                        break;\r\n                }\r\n                    }\r\n\r\n                }\r\n                \r\n            });\r\n\r\n            if(initial) initial = !initial;\r\n        })\r\n    }\r\n\r\n    function sendMessage() {\r\n        const db = getFirestore(firebaseApp);\r\n        const messagesColRef = collection(db, \"messages\");\r\n        const newMessage = {\r\n            from: auth.user.uid,\r\n            to: route.params.uid,\r\n            type: 'text',\r\n            timestamp: Timestamp.fromDate(new Date(Date.now())),\r\n            content: textContent.value.value\r\n        };\r\n        addDoc(messagesColRef, newMessage)\r\n        .then(() => {\r\n            updateMessages();\r\n            textContent.value.value = '';\r\n        })\r\n\r\n    }\r\n</script>"],"mappings":";;EACSA,KAAK,EAAC;AAAW;;EAEbA,KAAK,EAAC;AAAS;;EAKTC,GAAG,EAAC;AAAa;;EAKdC,GAAG,EAAC;AAAa;;uBAZnCC,mBAAA,CAeM,OAfNC,UAeM,GAdFC,mBAAA,CAA+B,gBAAAC,gBAAA,CAApBC,MAAA,CAAAC,QAAQ,kBACnBH,mBAAA,CAEM,OAFNI,UAEM,I,kBADFN,mBAAA,CAA6HO,SAAA,QAJzIC,WAAA,CAI2CJ,MAAA,CAAAK,UAAU,EAAvBC,SAAS;yBAA3BC,YAAA,CAA6HC,wBAJzI,CAI4DF,SAAS,CAACG,IAAI;MAAGC,GAAG,EAAEJ,SAAS,CAACK,EAAE;MAAGC,OAAO,EAAEN,SAAS,CAACM;;oCAE5Gd,mBAAA,CASS,iBARLA,mBAAA,CAAwD;IAAlDe,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,IAAA,CAAAC,UAAA,IAAAD,IAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;IAAEG,GAAG,EAAC,YAAY;IAACC,KAAK,EAAC;MAChDrB,mBAAA,CAGQ,SAHRsB,UAGQ,GAFJtB,mBAAA,CAA0F;IAAnFa,EAAE,EAAC,aAAa;IAACU,IAAI,EAAC,MAAM;IAACC,MAAM,EAAC,sBAAsB;IAAEC,QAAM,EAAEvB,MAAA,CAAAwB;qCAC3E1B,mBAAA,CAAwD;IAAlDe,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,IAAA,CAAAS,UAAA,IAAAT,IAAA,CAAAS,UAAA,IAAAV,IAAA,CAAU;IAAEG,GAAG,EAAC,YAAY;IAACC,KAAK,EAAC;QAEpDrB,mBAAA,CAAoD;IAA9Ce,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,IAAA,CAAAU,SAAA,IAAAV,IAAA,CAAAU,SAAA,IAAAX,IAAA,CAAS;IAAEG,GAAG,EAAC,SAAS;IAACC,KAAK,EAAC;MAC5CrB,mBAAA,CAAuC,YAAvC6B,UAAuC,+BACvC7B,mBAAA,CAAuD;IAAjDe,OAAK,EAAEb,MAAA,CAAA4B,WAAW;IAAEV,GAAG,EAAC,UAAU;IAACC,KAAK,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}