{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { useRoute } from 'vue-router';\nimport { onMounted, ref } from 'vue';\nimport { firebaseApp } from '@/firebase';\nimport { Timestamp, addDoc, and, collection, doc, getDoc, getDocs, getFirestore, or, orderBy, query, where } from 'firebase/firestore';\nimport { useAuthStore } from '@/stores/auth';\nimport SentTextMessage from './messages/SentTextMessage.vue';\nimport ReceivedTextMessage from './messages/ReceivedTextMessage.vue';\nimport SentImageMessage from './messages/SentImageMessage.vue';\nimport ReceivedImageMessage from './messages/ReceivedImageMessage.vue';\nexport default {\n  __name: 'MessagesPage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n    const auth = useAuthStore();\n    let textContent = ref('');\n    let nickname = ref('');\n    let messages = ref([]);\n    let components = ref([]);\n    let initial = true;\n    onMounted(() => {\n      updateMessages();\n    });\n    function photoUploaded(event) {\n      // let file = event.target.files[0];\n      // const uuid = console.log(crypto.randomUUID());\n    }\n    function updateMessages() {\n      const db = getFirestore(firebaseApp);\n      const messagesColRef = collection(db, \"messages\");\n      const userDocRef = doc(db, \"users\", route.params.uid);\n      messages.value = [];\n      getDoc(userDocRef).then(snapshot => {\n        if (snapshot.exists()) {\n          nickname.value = snapshot.data().nickname;\n          console.log(nickname.value);\n        }\n      });\n      const q = query(messagesColRef, or(and(where('from', '==', auth.user.uid), where('to', '==', route.params.uid)), (where('to', '==', auth.user.uid), where('from', '==', route.params.uid))), orderBy('timestamp', 'desc'));\n      getDocs(q).then(snapshot => {\n        snapshot.forEach(doc => {\n          let data = doc.data();\n          messages.value.push({\n            'id': doc.id,\n            ...data\n          });\n        });\n        console.log(messages.value);\n        messages.value.forEach(message => {\n          const id = message.id;\n          const type = message.type;\n          const sent = message.from === auth.user.uid;\n          const content = message.content;\n          if (!components.value.map(c => c.id).includes(id)) {\n            if (initial) {\n              switch (type) {\n                case 'text':\n                  if (sent) {\n                    components.value.push({\n                      'id': id,\n                      'name': SentTextMessage,\n                      'content': content\n                    });\n                  } else {\n                    components.value.push({\n                      'id': id,\n                      'name': ReceivedTextMessage,\n                      'content': content\n                    });\n                  }\n                  break;\n                case 'image':\n                  if (sent) {\n                    components.value.push({\n                      'id': id,\n                      'name': SentImageMessage,\n                      'content': content\n                    });\n                  } else {\n                    components.value.push({\n                      'id': id,\n                      'name': ReceivedImageMessage,\n                      'content': content\n                    });\n                  }\n                  break;\n              }\n            } else {\n              switch (type) {\n                case 'text':\n                  if (sent) {\n                    components.value.unshift({\n                      'id': id,\n                      'name': SentTextMessage,\n                      'content': content\n                    });\n                  } else {\n                    components.value.unshift({\n                      'id': id,\n                      'name': ReceivedTextMessage,\n                      'content': content\n                    });\n                  }\n                  break;\n                case 'image':\n                  if (sent) {\n                    components.value.unshift({\n                      'id': id,\n                      'name': SentImageMessage,\n                      'content': content\n                    });\n                  } else {\n                    components.value.unshift({\n                      'id': id,\n                      'name': ReceivedImageMessage,\n                      'content': content\n                    });\n                  }\n                  break;\n              }\n            }\n          }\n        });\n        if (initial) initial = !initial;\n      });\n    }\n    function sendMessage() {\n      const db = getFirestore(firebaseApp);\n      const messagesColRef = collection(db, \"messages\");\n      const newMessage = {\n        from: auth.user.uid,\n        to: route.params.uid,\n        type: 'text',\n        timestamp: Timestamp.fromDate(new Date(Date.now())),\n        content: textContent.value.value\n      };\n      addDoc(messagesColRef, newMessage).then(() => {\n        updateMessages();\n        textContent.value.value = '';\n      });\n    }\n    const __returned__ = {\n      route,\n      auth,\n      get textContent() {\n        return textContent;\n      },\n      set textContent(v) {\n        textContent = v;\n      },\n      get nickname() {\n        return nickname;\n      },\n      set nickname(v) {\n        nickname = v;\n      },\n      get messages() {\n        return messages;\n      },\n      set messages(v) {\n        messages = v;\n      },\n      get components() {\n        return components;\n      },\n      set components(v) {\n        components = v;\n      },\n      get initial() {\n        return initial;\n      },\n      set initial(v) {\n        initial = v;\n      },\n      photoUploaded,\n      updateMessages,\n      sendMessage,\n      get useRoute() {\n        return useRoute;\n      },\n      onMounted,\n      ref,\n      get firebaseApp() {\n        return firebaseApp;\n      },\n      get Timestamp() {\n        return Timestamp;\n      },\n      get addDoc() {\n        return addDoc;\n      },\n      get and() {\n        return and;\n      },\n      get collection() {\n        return collection;\n      },\n      get doc() {\n        return doc;\n      },\n      get getDoc() {\n        return getDoc;\n      },\n      get getDocs() {\n        return getDocs;\n      },\n      get getFirestore() {\n        return getFirestore;\n      },\n      get or() {\n        return or;\n      },\n      get orderBy() {\n        return orderBy;\n      },\n      get query() {\n        return query;\n      },\n      get where() {\n        return where;\n      },\n      get useAuthStore() {\n        return useAuthStore;\n      },\n      SentTextMessage,\n      ReceivedTextMessage,\n      SentImageMessage,\n      ReceivedImageMessage\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["useRoute","onMounted","ref","firebaseApp","Timestamp","addDoc","and","collection","doc","getDoc","getDocs","getFirestore","or","orderBy","query","where","useAuthStore","SentTextMessage","ReceivedTextMessage","SentImageMessage","ReceivedImageMessage","route","auth","textContent","nickname","messages","components","initial","updateMessages","photoUploaded","event","db","messagesColRef","userDocRef","params","uid","value","then","snapshot","exists","data","console","log","q","user","forEach","push","id","message","type","sent","from","content","map","c","includes","unshift","sendMessage","newMessage","to","timestamp","fromDate","Date","now"],"sources":["D:/UserData/Desktop/UEK/PSM/KKDP/psm-project/src/components/MessagesPage.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n        <header>{{ nickname }}</header>\r\n        <div class=\"content\">\r\n            <component v-for=\"component in components\" :is=\"component.name\" :key=\"component.id\" :content=\"component.content\"></component>\r\n        </div>\r\n        <footer>\r\n            <img @click=\"openCamera\" src=\"camera.png\" width=\"30px\"/>\r\n            <label for=\"photoUpload\">\r\n                <input id=\"photoUpload\" type=\"file\" accept=\"image/png,image/jpeg\" @change=\"photoUploaded\">\r\n                <img @click=\"openImages\" src=\"images.png\" width=\"30px\"/>\r\n            </label>\r\n            <img @click=\"openAudio\" src=\"mic.png\" width=\"30px\"/>\r\n            <textarea ref=\"textContent\"></textarea>\r\n            <img @click=\"sendMessage\" src=\"send.png\" width=\"30px\"/>\r\n        </footer>\r\n    </div>\r\n</template>\r\n\r\n<style>\r\n    .container {\r\n        display: flex;\r\n        flex-direction: column;\r\n        height: 100%;\r\n        width: 100%;\r\n        background-color: #eee;\r\n    }\r\n\r\n    #photoUpload {\r\n        display: none;\r\n    }\r\n\r\n    .container header, footer {\r\n        padding: 10px;\r\n    }\r\n    .container .content {\r\n        flex: 1 1 auto;\r\n        display: flex;\r\n        flex-direction: column-reverse;\r\n        overflow-y: auto;\r\n        min-height: 0px;\r\n    }\r\n\r\n    footer {\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n\r\n    footer textarea {\r\n        flex: 1 1 auto;\r\n        height: 50px;\r\n    }\r\n\r\n    footer img {\r\n        margin: 5px;\r\n    }\r\n\r\n\r\n</style>\r\n\r\n<script setup>\r\n    import { useRoute } from 'vue-router';\r\n    import { onMounted, ref } from 'vue';\r\n    import { firebaseApp } from '@/firebase';\r\n    import { Timestamp, addDoc, and, collection, doc, getDoc, getDocs, getFirestore, or, orderBy, query, where } from 'firebase/firestore';\r\n    import { useAuthStore } from '@/stores/auth';\r\n    import SentTextMessage from './messages/SentTextMessage.vue';\r\n    import ReceivedTextMessage from './messages/ReceivedTextMessage.vue';\r\n    import SentImageMessage from './messages/SentImageMessage.vue';\r\n    import ReceivedImageMessage from './messages/ReceivedImageMessage.vue';\r\n    const route = useRoute();\r\n    const auth = useAuthStore();\r\n\r\n    let textContent = ref('');\r\n    let nickname = ref('');\r\n    let messages = ref([]);\r\n    let components = ref([]);\r\n    let initial = true;\r\n    onMounted(() => {\r\n        updateMessages();\r\n    });\r\n\r\n    function photoUploaded(event) {\r\n        // let file = event.target.files[0];\r\n        // const uuid = console.log(crypto.randomUUID());\r\n    }\r\n\r\n    function updateMessages() {\r\n        const db = getFirestore(firebaseApp)\r\n        const messagesColRef = collection(db, \"messages\");\r\n        const userDocRef = doc(db, \"users\", route.params.uid);\r\n        messages.value = [];\r\n        getDoc(userDocRef)\r\n        .then((snapshot) => {\r\n            if(snapshot.exists()) {\r\n                nickname.value = snapshot.data().nickname;\r\n                console.log(nickname.value);\r\n            }\r\n        })\r\n\r\n        const q = query(messagesColRef, or(and(where('from', '==', auth.user.uid), where('to', '==', route.params.uid)), (where('to', '==', auth.user.uid), where('from', '==', route.params.uid))), orderBy('timestamp', 'desc'));\r\n        getDocs(q)\r\n        .then((snapshot) => {\r\n            snapshot.forEach((doc) => {\r\n                let data = doc.data();\r\n                messages.value.push({'id': doc.id, ...data});\r\n            });\r\n            console.log(messages.value);\r\n            messages.value.forEach((message) => {\r\n                const id = message.id;\r\n                const type = message.type;\r\n                const sent = message.from === auth.user.uid;\r\n                const content = message.content;\r\n                if(!components.value.map((c) => c.id).includes(id)) {\r\n                    if(initial) {\r\n                        switch(type) {\r\n                    case 'text':\r\n                        if(sent) {\r\n                            components.value.push({\r\n                                'id': id,\r\n                                'name': SentTextMessage,\r\n                                'content': content\r\n                            });\r\n                        } else {\r\n                            components.value.push({\r\n                                'id': id,\r\n                                'name': ReceivedTextMessage,\r\n                                'content': content\r\n                            });\r\n                        }\r\n                        break;\r\n                    case 'image':\r\n                    if(sent) {\r\n                            components.value.push({\r\n                                'id': id,\r\n                                'name': SentImageMessage,\r\n                                'content': content\r\n                            });\r\n                        } else {\r\n                            components.value.push({\r\n                                'id': id,\r\n                                'name': ReceivedImageMessage,\r\n                                'content': content\r\n                            });\r\n                        }\r\n                        break;\r\n                }\r\n                    } else {\r\n                        switch(type) {\r\n                    case 'text':\r\n                        if(sent) {\r\n                            components.value.unshift({\r\n                                'id': id,\r\n                                'name': SentTextMessage,\r\n                                'content': content\r\n                            });\r\n                        } else {\r\n                            components.value.unshift({\r\n                                'id': id,\r\n                                'name': ReceivedTextMessage,\r\n                                'content': content\r\n                            });\r\n                        }\r\n                        break;\r\n                    case 'image':\r\n                    if(sent) {\r\n                            components.value.unshift({\r\n                                'id': id,\r\n                                'name': SentImageMessage,\r\n                                'content': content\r\n                            });\r\n                        } else {\r\n                            components.value.unshift({\r\n                                'id': id,\r\n                                'name': ReceivedImageMessage,\r\n                                'content': content\r\n                            });\r\n                        }\r\n                        break;\r\n                }\r\n                    }\r\n\r\n                }\r\n                \r\n            });\r\n\r\n            if(initial) initial = !initial;\r\n        })\r\n    }\r\n\r\n    function sendMessage() {\r\n        const db = getFirestore(firebaseApp);\r\n        const messagesColRef = collection(db, \"messages\");\r\n        const newMessage = {\r\n            from: auth.user.uid,\r\n            to: route.params.uid,\r\n            type: 'text',\r\n            timestamp: Timestamp.fromDate(new Date(Date.now())),\r\n            content: textContent.value.value\r\n        };\r\n        addDoc(messagesColRef, newMessage)\r\n        .then(() => {\r\n            updateMessages();\r\n            textContent.value.value = '';\r\n        })\r\n\r\n    }\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}