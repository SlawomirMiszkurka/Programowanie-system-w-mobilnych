{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveDynamicComponent as _resolveDynamicComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"navbar\"\n};\nconst _hoisted_3 = {\n  class: \"headerText\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"width\": \"30px\"\n  }\n}, null, -1 /* HOISTED */);\nconst _hoisted_5 = {\n  class: \"messagesContent\"\n};\nconst _hoisted_6 = {\n  for: \"photoUpload\"\n};\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"img\", {\n  src: \"images.png\",\n  width: \"30px\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"img\", {\n  id: \"stopRecording\",\n  src: \"stop.png\",\n  width: \"30px\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"img\", {\n  id: \"deleteRecording\",\n  src: \"trashcan.png\",\n  width: \"30px\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_10 = {\n  class: \"form-control\",\n  ref: \"textContent\",\n  type: \"text\"\n};\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"img\", {\n  id: \"sendAudioMessage\",\n  src: \"send.png\",\n  width: \"30px\"\n}, null, -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"header\", _hoisted_2, [_createElementVNode(\"img\", {\n    onClick: $setup.goBack,\n    src: \"back.png\",\n    width: \"30px\"\n  }), _createElementVNode(\"span\", _hoisted_3, _toDisplayString($setup.nickname), 1 /* TEXT */), _hoisted_4]), _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.components, component => {\n    return _openBlock(), _createBlock(_resolveDynamicComponent(component.name), {\n      key: component.id,\n      content: component.content\n    }, null, 8 /* PROPS */, [\"content\"]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"footer\", null, [_createElementVNode(\"label\", _hoisted_6, [_createElementVNode(\"input\", {\n    id: \"photoUpload\",\n    type: \"file\",\n    accept: \"image/png,image/jpeg\",\n    onChange: $setup.photoUploaded\n  }, null, 32 /* NEED_HYDRATION */), _hoisted_7]), _createElementVNode(\"img\", {\n    id: \"startRecording\",\n    onClick: $setup.openAudio,\n    src: \"mic.png\",\n    width: \"30px\"\n  }), _hoisted_8, _hoisted_9, _createElementVNode(\"input\", _hoisted_10, null, 512 /* NEED_PATCH */), _createElementVNode(\"img\", {\n    id: \"sendMessage\",\n    onClick: $setup.sendMessage,\n    src: \"send.png\",\n    width: \"30px\"\n  }), _hoisted_11])]);\n}","map":{"version":3,"names":["class","_createElementVNode","style","for","src","width","id","ref","type","_createElementBlock","_hoisted_1","_hoisted_2","onClick","$setup","goBack","_hoisted_3","_toDisplayString","nickname","_hoisted_4","_hoisted_5","_Fragment","_renderList","components","component","_createBlock","_resolveDynamicComponent","name","key","content","_hoisted_6","accept","onChange","photoUploaded","_hoisted_7","openAudio","_hoisted_8","_hoisted_9","_hoisted_10","sendMessage","_hoisted_11"],"sources":["D:\\UserData\\Desktop\\UEK\\PSM\\KKDP\\psm-project\\src\\components\\MessagesPage.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n        <header class=\"navbar\">\r\n            <img @click=\"goBack\" src=\"back.png\" width=\"30px\"/>\r\n            <span class=\"headerText\">{{ nickname }}</span>\r\n            <div style=\"width: 30px\"></div>\r\n        </header>\r\n        <div class=\"messagesContent\">\r\n            <component v-for=\"component in components\" :is=\"component.name\" :key=\"component.id\" :content=\"component.content\"></component>\r\n        </div>\r\n        <footer>\r\n            <label for=\"photoUpload\">\r\n                <input id=\"photoUpload\" type=\"file\" accept=\"image/png,image/jpeg\" @change=\"photoUploaded\">\r\n                <img src=\"images.png\" width=\"30px\"/>\r\n            </label>\r\n            <img id=\"startRecording\" @click=\"openAudio\" src=\"mic.png\" width=\"30px\"/>\r\n            <img id=\"stopRecording\" src=\"stop.png\" width=\"30px\"/>\r\n            <img id=\"deleteRecording\" src=\"trashcan.png\" width=\"30px\"/>\r\n            <input class=\"form-control\" ref=\"textContent\" type=\"text\" />\r\n            <img id=\"sendMessage\" @click=\"sendMessage\" src=\"send.png\" width=\"30px\"/>\r\n            <img id=\"sendAudioMessage\" src=\"send.png\" width=\"30px\"/>\r\n        </footer>\r\n    </div>\r\n</template>\r\n\r\n<style>\r\n\r\n    #stopRecording {\r\n        display: none;\r\n    }\r\n\r\n    #sendAudioMessage {\r\n        display: none;\r\n    }\r\n\r\n    #recordingStatus {\r\n        display:block;\r\n    }\r\n\r\n    #deleteRecording {\r\n        display: none;\r\n    }\r\n\r\n    #photoUpload {\r\n        display: none;\r\n    }\r\n\r\n\r\n    .container .messagesContent {\r\n        flex: 1 1 auto;\r\n        display: flex;\r\n        flex-direction: column-reverse;\r\n        overflow-y: auto;\r\n        min-height: 0px;\r\n    }\r\n\r\n    footer {\r\n        padding: 5px;\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n\r\n    footer textarea {\r\n        flex: 1 1 auto;\r\n        height: 50px;\r\n    }\r\n\r\n    footer img {\r\n        margin: 5px;\r\n    }\r\n\r\n\r\n</style>\r\n\r\n<script setup>\r\n    import { useRoute, useRouter } from 'vue-router';\r\n    import { onMounted, ref } from 'vue';\r\n    import { firebaseApp } from '@/firebase';\r\n    import { Timestamp, addDoc, and, collection, doc, getDoc, getDocs, getFirestore, or, orderBy, query, where } from 'firebase/firestore';\r\n    import { useAuthStore } from '@/stores/auth';\r\n    import SentTextMessage from './messages/SentTextMessage.vue';\r\n    import ReceivedTextMessage from './messages/ReceivedTextMessage.vue';\r\n    import SentImageMessage from './messages/SentImageMessage.vue';\r\n    import ReceivedImageMessage from './messages/ReceivedImageMessage.vue';\r\nimport { getStorage, ref as storageRef, uploadBytes } from 'firebase/storage';\r\nimport SentAudioMessage from './messages/SentAudioMessage.vue';\r\nimport ReceivedAudioMessage from './messages/ReceivedAudioMessage.vue';\r\n    const route = useRoute();\r\n    const auth = useAuthStore();\r\n    const router = useRouter();\r\n\r\n    let textContent = ref('');\r\n    let nickname = ref('');\r\n    let messages = ref([]);\r\n    let components = ref([]);\r\n    let isRecording = false;\r\n    let initial = true;\r\n    let recordedSeconds = ref(0);\r\n    onMounted(() => {\r\n        updateMessages();\r\n    });\r\n\r\n    function goBack() {\r\n        router.go(-1);\r\n    }\r\n\r\n\r\n    function photoUploaded(event) {\r\n        let file = event.target.files[0];\r\n        const uuid = crypto.randomUUID();\r\n        const storage = getStorage(firebaseApp);\r\n        const imagesRef = storageRef(storage, `images/${uuid}`);\r\n        uploadBytes(imagesRef, file)\r\n        .then(() => {\r\n            const db = getFirestore(firebaseApp);\r\n            const messagesColRef = collection(db, \"messages\");\r\n            const newMessage = {\r\n                from: auth.user.uid,\r\n                to: route.params.uid,\r\n                type: 'image',\r\n                timestamp: Timestamp.fromDate(new Date(Date.now())),\r\n                content: uuid\r\n            };\r\n            addDoc(messagesColRef, newMessage)\r\n            .then(() => {\r\n                updateMessages();\r\n            })\r\n        })\r\n\r\n        console.log(file);\r\n    }\r\n\r\n    function openAudio() {\r\n        if(navigator.mediaDevices.getUserMedia) {\r\n            isRecording = true;\r\n            const start = document.getElementById('startRecording');\r\n            const stop = document.getElementById('stopRecording');\r\n            const deleteRecording = document.getElementById('deleteRecording');\r\n            const sendMessage = document.getElementById('sendMessage');\r\n            const sendAudioMessage = document.getElementById('sendAudioMessage');\r\n\r\n            const constrains = { audio: true };\r\n            navigator.mediaDevices.getUserMedia(constrains)\r\n            .then((stream) => {\r\n                let chunks = [];\r\n                const mediaRecorder = new MediaRecorder(stream);\r\n\r\n                mediaRecorder.ondataavailable = (e) => {\r\n                    chunks.push(e.data);\r\n                }\r\n                recordedSeconds.value = 0\r\n                mediaRecorder.start();\r\n                var countTimeInterval = setInterval(() => {\r\n                    recordedSeconds.value++;\r\n                    textContent.value = new Date(recordedSeconds.value * 1000).toISOString().slice(14, 19);\r\n                }, 1000);\r\n                sendMessage.style.display = 'none';\r\n                sendAudioMessage.style.display = 'block';\r\n                start.style.display = 'none';\r\n                stop.style.display = 'block';\r\n\r\n                stop.onclick = () => {\r\n                    mediaRecorder.stop();\r\n                    clearInterval(countTimeInterval);\r\n                    console.log('stop clicked');\r\n                    stop.style.display = 'none';\r\n                    deleteRecording.style.display = 'block';\r\n                    deleteRecording.onclick = () => {\r\n                        chunks = [];\r\n                        recordedSeconds.value = 0;\r\n                        textContent.value = \"\";\r\n                        sendMessage.style.display = 'block';\r\n                        sendAudioMessage.style.display = 'none';\r\n                        start.style.display = 'block';\r\n                        deleteRecording.style.display = 'none';\r\n                        stop.style.display = 'none';\r\n                        stream.getTracks().forEach(track => track.stop());\r\n                        isRecording = false;\r\n                    }\r\n                }\r\n\r\n                mediaRecorder.onstop = () => {\r\n                    console.log('onstop event');\r\n                    sendAudioMessage.onclick = () => {\r\n                        console.log('send audio click')\r\n                    const blob = new Blob(chunks, { type: \"audio/ogg; codecs=opus\" });\r\n                    const uuid = crypto.randomUUID();\r\n                    const storage = getStorage(firebaseApp);\r\n                    const imagesRef = storageRef(storage, `audio/${uuid}`);\r\n                    uploadBytes(imagesRef, blob)\r\n                    .then(() => {\r\n                        const db = getFirestore(firebaseApp);\r\n                        const messagesColRef = collection(db, \"messages\");\r\n                        const newMessage = {\r\n                            from: auth.user.uid,\r\n                            to: route.params.uid,\r\n                            type: 'audio',\r\n                            timestamp: Timestamp.fromDate(new Date(Date.now())),\r\n                            content: uuid\r\n                        };\r\n                        addDoc(messagesColRef, newMessage)\r\n                        .then(() => {\r\n                            updateMessages();\r\n                            recordedSeconds.value = 0;\r\n                            textContent.value = \"\";\r\n                            sendMessage.style.display = 'block';\r\n                            sendAudioMessage.style.display = 'none';\r\n                            start.style.display = 'block';\r\n                            stop.style.display = 'none';\r\n                            deleteRecording.style.display = 'none';\r\n                            stream.getTracks().forEach(track => track.stop());\r\n                            isRecording = false;\r\n                        })\r\n                    })\r\n\r\n                }\r\n                }\r\n\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    function updateMessages() {\r\n        const db = getFirestore(firebaseApp)\r\n        const messagesColRef = collection(db, \"messages\");\r\n        const userDocRef = doc(db, \"users\", route.params.uid);\r\n        messages.value = [];\r\n        getDoc(userDocRef)\r\n        .then((snapshot) => {\r\n            if(snapshot.exists()) {\r\n                nickname.value = snapshot.data().nickname;\r\n                console.log(nickname.value);\r\n            }\r\n        })\r\n\r\n        const q = query(messagesColRef, or(and(where('from', '==', auth.user.uid), where('to', '==', route.params.uid)), and(where('to', '==', auth.user.uid), where('from', '==', route.params.uid))), orderBy('timestamp', 'desc'));\r\n        getDocs(q)\r\n        .then((snapshot) => {\r\n            snapshot.forEach((doc) => {\r\n                let data = doc.data();\r\n                messages.value.push({'id': doc.id, ...data});\r\n            });\r\n            console.log(messages.value);\r\n            messages.value.forEach((message) => {\r\n                const id = message.id;\r\n                const type = message.type;\r\n                const sent = message.from === auth.user.uid;\r\n                const content = message.content;\r\n                if(!components.value.map((c) => c.id).includes(id)) {\r\n                    if(initial) {\r\n                        switch(type) {\r\n                    case 'text':\r\n                        if(sent) {\r\n                            components.value.push({\r\n                                'id': id,\r\n                                'name': SentTextMessage,\r\n                                'content': content\r\n                            });\r\n                        } else {\r\n                            components.value.push({\r\n                                'id': id,\r\n                                'name': ReceivedTextMessage,\r\n                                'content': content\r\n                            });\r\n                        }\r\n                        break;\r\n                    case 'image':\r\n                    if(sent) {\r\n                            components.value.push({\r\n                                'id': id,\r\n                                'name': SentImageMessage,\r\n                                'content': content\r\n                            });\r\n                        } else {\r\n                            components.value.push({\r\n                                'id': id,\r\n                                'name': ReceivedImageMessage,\r\n                                'content': content\r\n                            });\r\n                        }\r\n                        break;\r\n                    case 'audio':\r\n                    if(sent) {\r\n                            components.value.push({\r\n                                'id': id,\r\n                                'name': SentAudioMessage,\r\n                                'content': content\r\n                            });\r\n                        } else {\r\n                            components.value.push({\r\n                                'id': id,\r\n                                'name': ReceivedAudioMessage,\r\n                                'content': content\r\n                            });\r\n                        }\r\n                        break;\r\n                }\r\n                    } else {\r\n                        switch(type) {\r\n                    case 'text':\r\n                        if(sent) {\r\n                            components.value.unshift({\r\n                                'id': id,\r\n                                'name': SentTextMessage,\r\n                                'content': content\r\n                            });\r\n                        } else {\r\n                            components.value.unshift({\r\n                                'id': id,\r\n                                'name': ReceivedTextMessage,\r\n                                'content': content\r\n                            });\r\n                        }\r\n                        break;\r\n                    case 'image':\r\n                    if(sent) {\r\n                            components.value.unshift({\r\n                                'id': id,\r\n                                'name': SentImageMessage,\r\n                                'content': content\r\n                            });\r\n                        } else {\r\n                            components.value.unshift({\r\n                                'id': id,\r\n                                'name': ReceivedImageMessage,\r\n                                'content': content\r\n                            });\r\n                        }\r\n                        break;\r\n                case 'audio':\r\n                    if(sent) {\r\n                            components.value.unshift({\r\n                                'id': id,\r\n                                'name': SentAudioMessage,\r\n                                'content': content\r\n                            });\r\n                        } else {\r\n                            components.value.unshift({\r\n                                'id': id,\r\n                                'name': ReceivedAudioMessage,\r\n                                'content': content\r\n                            });\r\n                        }\r\n                        break;\r\n                }\r\n                    }\r\n\r\n                }\r\n                \r\n            });\r\n\r\n            if(initial) initial = !initial;\r\n        })\r\n    }\r\n\r\n    function sendMessage() {\r\n        if(!isRecording) {\r\n            const db = getFirestore(firebaseApp);\r\n            const messagesColRef = collection(db, \"messages\");\r\n            const newMessage = {\r\n                from: auth.user.uid,\r\n                to: route.params.uid,\r\n                type: 'text',\r\n                timestamp: Timestamp.fromDate(new Date(Date.now())),\r\n                content: textContent.value.value\r\n            };\r\n            addDoc(messagesColRef, newMessage)\r\n            .then(() => {\r\n                updateMessages();\r\n                textContent.value.value = '';\r\n            })\r\n        }\r\n    }\r\n</script>"],"mappings":";;EACSA,KAAK,EAAC;AAAW;;EACVA,KAAK,EAAC;AAAQ;;EAEZA,KAAK,EAAC;AAAY;gCACxBC,mBAAA,CAA+B;EAA1BC,KAAmB,EAAnB;IAAA;EAAA;AAAmB;;EAEvBF,KAAK,EAAC;AAAiB;;EAIjBG,GAAG,EAAC;AAAa;gCAEpBF,mBAAA,CAAoC;EAA/BG,GAAG,EAAC,YAAY;EAACC,KAAK,EAAC;;gCAGhCJ,mBAAA,CAAqD;EAAhDK,EAAE,EAAC,eAAe;EAACF,GAAG,EAAC,UAAU;EAACC,KAAK,EAAC;;gCAC7CJ,mBAAA,CAA2D;EAAtDK,EAAE,EAAC,iBAAiB;EAACF,GAAG,EAAC,cAAc;EAACC,KAAK,EAAC;;;EAC5CL,KAAK,EAAC,cAAc;EAACO,GAAG,EAAC,aAAa;EAACC,IAAI,EAAC;;iCAEnDP,mBAAA,CAAwD;EAAnDK,EAAE,EAAC,kBAAkB;EAACF,GAAG,EAAC,UAAU;EAACC,KAAK,EAAC;;;uBAnBxDI,mBAAA,CAqBM,OArBNC,UAqBM,GApBFT,mBAAA,CAIS,UAJTU,UAIS,GAHLV,mBAAA,CAAkD;IAA5CW,OAAK,EAAEC,MAAA,CAAAC,MAAM;IAAEV,GAAG,EAAC,UAAU;IAACC,KAAK,EAAC;MAC1CJ,mBAAA,CAA8C,QAA9Cc,UAA8C,EAAAC,gBAAA,CAAlBH,MAAA,CAAAI,QAAQ,kBACpCC,UAA+B,C,GAEnCjB,mBAAA,CAEM,OAFNkB,UAEM,I,kBADFV,mBAAA,CAA6HW,SAAA,QARzIC,WAAA,CAQ2CR,MAAA,CAAAS,UAAU,EAAvBC,SAAS;yBAA3BC,YAAA,CAA6HC,wBARzI,CAQ4DF,SAAS,CAACG,IAAI;MAAGC,GAAG,EAAEJ,SAAS,CAACjB,EAAE;MAAGsB,OAAO,EAAEL,SAAS,CAACK;;oCAE5G3B,mBAAA,CAWS,iBAVLA,mBAAA,CAGQ,SAHR4B,UAGQ,GAFJ5B,mBAAA,CAA0F;IAAnFK,EAAE,EAAC,aAAa;IAACE,IAAI,EAAC,MAAM;IAACsB,MAAM,EAAC,sBAAsB;IAAEC,QAAM,EAAElB,MAAA,CAAAmB;qCAC3EC,UAAoC,C,GAExChC,mBAAA,CAAwE;IAAnEK,EAAE,EAAC,gBAAgB;IAAEM,OAAK,EAAEC,MAAA,CAAAqB,SAAS;IAAE9B,GAAG,EAAC,SAAS;IAACC,KAAK,EAAC;MAChE8B,UAAqD,EACrDC,UAA2D,EAC3DnC,mBAAA,CAA4D,SAA5DoC,WAA4D,+BAC5DpC,mBAAA,CAAwE;IAAnEK,EAAE,EAAC,aAAa;IAAEM,OAAK,EAAEC,MAAA,CAAAyB,WAAW;IAAElC,GAAG,EAAC,UAAU;IAACC,KAAK,EAAC;MAChEkC,WAAwD,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}